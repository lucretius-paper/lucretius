# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import lucretius_service_pb2 as lucretius__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in lucretius_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LucretiusServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.connect = channel.unary_unary(
                '/LucretiusService/connect',
                request_serializer=lucretius__service__pb2.ConnectionRequest.SerializeToString,
                response_deserializer=lucretius__service__pb2.ConnectionResponse.FromString,
                _registered_method=True)
        self.start = channel.unary_unary(
                '/LucretiusService/start',
                request_serializer=lucretius__service__pb2.StartRequest.SerializeToString,
                response_deserializer=lucretius__service__pb2.StartResponse.FromString,
                _registered_method=True)
        self.finished = channel.unary_unary(
                '/LucretiusService/finished',
                request_serializer=lucretius__service__pb2.FinishedNotification.SerializeToString,
                response_deserializer=lucretius__service__pb2.Empty.FromString,
                _registered_method=True)
        self.am_i_done = channel.unary_unary(
                '/LucretiusService/am_i_done',
                request_serializer=lucretius__service__pb2.Empty.SerializeToString,
                response_deserializer=lucretius__service__pb2.DoneResponse.FromString,
                _registered_method=True)


class LucretiusServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finished(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def am_i_done(self, request, context):
        """Might not need this
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LucretiusServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'connect': grpc.unary_unary_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=lucretius__service__pb2.ConnectionRequest.FromString,
                    response_serializer=lucretius__service__pb2.ConnectionResponse.SerializeToString,
            ),
            'start': grpc.unary_unary_rpc_method_handler(
                    servicer.start,
                    request_deserializer=lucretius__service__pb2.StartRequest.FromString,
                    response_serializer=lucretius__service__pb2.StartResponse.SerializeToString,
            ),
            'finished': grpc.unary_unary_rpc_method_handler(
                    servicer.finished,
                    request_deserializer=lucretius__service__pb2.FinishedNotification.FromString,
                    response_serializer=lucretius__service__pb2.Empty.SerializeToString,
            ),
            'am_i_done': grpc.unary_unary_rpc_method_handler(
                    servicer.am_i_done,
                    request_deserializer=lucretius__service__pb2.Empty.FromString,
                    response_serializer=lucretius__service__pb2.DoneResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LucretiusService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('LucretiusService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LucretiusService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LucretiusService/connect',
            lucretius__service__pb2.ConnectionRequest.SerializeToString,
            lucretius__service__pb2.ConnectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LucretiusService/start',
            lucretius__service__pb2.StartRequest.SerializeToString,
            lucretius__service__pb2.StartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def finished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LucretiusService/finished',
            lucretius__service__pb2.FinishedNotification.SerializeToString,
            lucretius__service__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def am_i_done(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/LucretiusService/am_i_done',
            lucretius__service__pb2.Empty.SerializeToString,
            lucretius__service__pb2.DoneResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
